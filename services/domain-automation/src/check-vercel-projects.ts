#!/usr/bin/env tsx

import dotenv from 'dotenv';
import path from 'path';

// Áí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Åø
dotenv.config({ path: path.join(__dirname, '../.env.local') });

async function checkVercelProjects() {
  const token = process.env.VERCEL_TOKEN;
  const teamId = process.env.VERCEL_TEAM_ID;
  
  if (!token) {
    console.error('‚ùå VERCEL_TOKEN„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    return;
  }
  
  console.log('üîç Vercel„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô...\n');
  
  try {
    // „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
    const url = teamId 
      ? `https://api.vercel.com/v9/projects?teamId=${teamId}`
      : 'https://api.vercel.com/v9/projects';
      
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    
    if (!response.ok) {
      const error = await response.text();
      console.error('‚ùå „Ç®„É©„Éº:', error);
      return;
    }
    
    const data = await response.json();
    
    console.log(`üì¶ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊï∞: ${data.projects?.length || 0}\n`);
    
    if (data.projects && data.projects.length > 0) {
      // LPÈñ¢ÈÄ£„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÊé¢„Åô
      const lpProjects = data.projects.filter((p: any) => 
        p.name.includes('lp') || 
        p.name.includes('validation') ||
        p.name.includes('ai-') ||
        p.name.includes('mywa')
      );
      
      console.log('üéØ LPÈñ¢ÈÄ£„Éó„É≠„Ç∏„Çß„ÇØ„Éà:');
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      
      lpProjects.forEach((project: any) => {
        console.log(`\nüìå ${project.name}`);
        console.log(`ID: ${project.id}`);
        console.log(`‰ΩúÊàêÊó•: ${new Date(project.createdAt).toLocaleString('ja-JP')}`);
        
        // „Ç´„Çπ„Çø„É†„Éâ„É°„Ç§„É≥ÊÉÖÂ†±
        if (project.alias && project.alias.length > 0) {
          console.log('„Éâ„É°„Ç§„É≥:');
          project.alias.forEach((domain: string) => {
            console.log(`  ‚Ä¢ ${domain}`);
          });
        } else {
          console.log('„Éâ„É°„Ç§„É≥: Êú™Ë®≠ÂÆö');
        }
        
        // ÊúÄÊñ∞„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„Éà
        if (project.latestDeployments && project.latestDeployments.length > 0) {
          const latest = project.latestDeployments[0];
          console.log(`ÊúÄÊñ∞„Éá„Éó„É≠„Ç§: ${latest.url} (${latest.state})`);
        }
      });
      
      if (lpProjects.length === 0) {
        console.log('LPÈñ¢ÈÄ£„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      }
      
      console.log('\n\nüìã ÂÖ®„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç‰∏ÄË¶ß:');
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      data.projects.forEach((p: any) => {
        console.log(`‚Ä¢ ${p.name}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  }
}

checkVercelProjects();